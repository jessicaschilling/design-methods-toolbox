{"remainingRequest":"/Users/jessicaschilling/code/design-methods-toolbox/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jessicaschilling/code/design-methods-toolbox/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jessicaschilling/code/design-methods-toolbox/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jessicaschilling/code/design-methods-toolbox/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/jessicaschilling/code/design-methods-toolbox/docs/tools/co-creation.md?vue&type=template&id=2c11d412&","dependencies":[{"path":"/Users/jessicaschilling/code/design-methods-toolbox/docs/tools/co-creation.md","mtime":1613592179298},{"path":"/Users/jessicaschilling/code/design-methods-toolbox/node_modules/cache-loader/dist/cjs.js","mtime":1613587018354},{"path":"/Users/jessicaschilling/code/design-methods-toolbox/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1613587018634},{"path":"/Users/jessicaschilling/code/design-methods-toolbox/node_modules/cache-loader/dist/cjs.js","mtime":1613587018354},{"path":"/Users/jessicaschilling/code/design-methods-toolbox/node_modules/vue-loader/lib/index.js","mtime":1613587018634},{"path":"/Users/jessicaschilling/code/design-methods-toolbox/node_modules/@vuepress/markdown-loader/index.js","mtime":1613587018628}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJjby1jcmVhdGlvbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjY28tY3JlYXRpb24iIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIENvLUNyZWF0aW9uIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAicGhhc2Ut8J+OqC1wcm9ibGVtLXNoYXBpbmctZm9jdXMtY29udmVyZ2UiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3BoYXNlLfCfjqgtcHJvYmxlbS1zaGFwaW5nLWZvY3VzLWNvbnZlcmdlIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiUGhhc2U6IildKSwKICAgICAgICBfdm0uX3YoIiDwn46oIFByb2JsZW0gc2hhcGluZyAgIHwgICAiKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJGb2N1czoiKV0pLAogICAgICAgIF92bS5fdigiIENvbnZlcmdlIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiVGltZSBjb21taXRtZW50OiIpXSksCiAgICAgICAgX3ZtLl92KCIgOTAgbWlucyBtaW5pbXVtICh0byBhY2NvdW50IGZvciBsZXZlbC1zZXR0aW5nKSIpLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJEaWZmaWN1bHR5OiIpXSksCiAgICAgICAgX3ZtLl92KCIgTW9kZXJhdGUiKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiTWF0ZXJpYWxzIG5lZWRlZDoiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgTWVldGluZyBzcGFjZSAocGh5c2ljYWwgb3IgdmlydHVhbCksIHdvcmtpbmcgdG9vbHMgKHRoaXMgY2FuIHZhcnkgZGVwZW5kaW5nIG9uIHRoZSB0eXBlIG9mIGNvLWNyZWF0aW9uIGFuZCBjb3VsZCBiZSBhbnl0aGluZyBmcm9tIGEgd2hpdGVib2FyZCBhbmQgc3RpY2tpZXMgdG8gYSBjb2RlIElERSksIHBhcnRpY2lwYW50cyBmcm9tIGEgdmFyaWV0eSBvZiB0ZWNobmljYWwgYW5kIGN1bHR1cmFsIHBlcnNwZWN0aXZlcyAodGhlIG1vcmUgb2YgdGhlc2UsIHRoZSBtb3JlIHVzZWZ1bCkiCiAgICAgICAgKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiV2hvIHNob3VsZCBwYXJ0aWNpcGF0ZToiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgVXNlciBleHBlcmllbmNlIGRlc2lnbmVycywgdmlzdWFsIGRlc2lnbmVycywgcHJvZHVjdC9wcm9qZWN0IG93bmVycywgY29tbXVuaXR5IHNwZWNpYWxpc3RzLCBkZXZlbG9wZXJzLCBhbmQvb3IgdXNlcnMiCiAgICAgICAgKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQmVzdCBmb3I6IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIE1pZC1zdGFnZSBzeW50aGVzaXMgYW5kIGluc2lnaHRzIHdvcmsgdGhhdCBiZW5lZml0cyBmcm9tIHN5bmNocm9ub3VzIGNvbW11bmljYXRpb24iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJhYm91dC10aGlzLXRvb2wiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2Fib3V0LXRoaXMtdG9vbCIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQWJvdXQgdGhpcyB0b29sIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiV2hpbGUgdGhpcyB0b29sYm94IG9mZmVycyBhIHZhcmlldHkgb2YgbWV0aG9kcyBmb3IgaXRlcmF0aW5nIG9uIG5ldyBwcm9kdWN0cyBhbmQgc2VydmljZXMgd2l0aCB5b3VyIGludGVybmFsIHRlYW0sIGFuZCBmb2xsb3dpbmcgdXAgd2l0aCB1c2VyIHRlc3RpbmcsIGNvLWNyZWF0aW9uIGlzIHVuaXF1ZSBpbiB0aGF0IGl0IGNvbWJpbmVzIHRoZXNlIHR3byBmcmFtZXdvcmtzIG9uIHRoZSBmbHk6IHlvdSBhbmQgeW91ciB1c2VycyAob3Igb3RoZXIgc3Rha2Vob2xkZXJzKSBjcmVhdGUgYSBwcm9kdWN0IHRvZ2V0aGVyLCBhbmQgZGlzY3VzcyBhbmQgZXZhbHVhdGUgYXMgeW91IGdvIGFsb25nLiBJZiBjby1jcmVhdGlvbiBpcyB3ZWxsLWV4ZWN1dGVkLCB5b3UncmUgbW9yZSBsaWtlbHkgdG8gZ2V0IGlkZWFzIHJpZ2h0IHRoZSBmaXJzdCB0aW1lLCBhbmQgeW91ciBjb21tdW5pdHkgb2YgdXNlcnMgaXMgbXVjaCBtb3JlIGxpa2VseSB0byB1c2UgYSB0b29sIHRoYXQgdGhleSBhY3RpdmVseSBoZWxwZWQgY3JlYXRlIOKAlCBldmVuIGlmIHlvdSBtYXkgaGF2ZSBkZXNpZ25lZCBhIHNpbWlsYXIgdG9vbCB1c2luZyBkaWZmZXJlbnQgbWV0aG9kcy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJDby1jcmVhdGlvbiB3aXRoIHVzZXJzIGlzIGFscmVhZHkgYXQgdGhlIHZlcnkgaGVhcnQgb2Ygb3BlbiBzb3VyY2UsIGFuZCBpbiBtYW55IHdheXMsIGxlYWRpbmcgYSBjby1jcmVhdGlvbiBzZXNzaW9uIGlzbid0IHRoYXQgbXVjaCBkaWZmZXJlbnQgdGhhbiBsZWFkaW5nIGNvbGxhYm9yYXRpdmUgZGV2ZWxvcG1lbnQgb24gR2l0SHViLCB3aXRoIG9uZSBjYXZlYXQuIE5vdGUgdGhhdCwgYXMgc3VnZ2VzdGVkIGJ5IHRoZSBuYW1lLCBjby1jcmVhdGlvbiB3b3JrcyBtb3JlIGVmZmVjdGl2ZWx5IHdoZW4gaXQncyBsZWQgaW4gYSBzeW5jaHJvbm91cyB3YXkuIEFzeW5jIGNvLWNyZWF0aW9uLCB3aGlsZSBwb3NzaWJsZSwgaXMgb2Z0ZW4gdG9vIGxhZ2d5IHRvIGJlIHdvcnRod2hpbGU7IHRoZSBlZmZvcnQgZXhwZW5kZWQgaW4gd2FpdGluZyBmb3Igb3RoZXJzJyBhc3luYyBpdGVyYXRpb24gY3ljbGVzIG1pZ2h0IGJlIGJldHRlciBzcGVuZCBqdXN0IGdldHRpbmcgYSB0ZWFtIGluIHRoZSBzYW1lIHBoeXNpY2FsIG9yIHZpcnR1YWwgcm9vbSBmb3IgYSB3aGlsZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJXaGF0IGFjdHVhbGx5IGhhcHBlbnMgaW4gYSBjby1jcmVhdGlvbiBzZXNzaW9uIGNhbiB2YXJ5IHdpZGVseSBkZXBlbmRpbmcgb24gdGhlIGdvYWxzIG9mIHRoZSBzZXNzaW9uLCB0aGUgbGV2ZWwgb2YgcHJvZHVjdCBmYW1pbGlhcml0eSBhbHJlYWR5IGV4cHJlc3NlZCBieSBwYXJ0aWNpcGFudHMsIHlvdXIgcHJvZ3Jlc3MgYWxvbmcgdGhlIG92ZXJhbGwgY3JlYXRpdmUgcGF0aCBhdCB0aGUgdGltZSBvZiB0aGUgc2Vzc2lvbiwgZXRjLiBIb3dldmVyLCB5b3UgY291bGQgYnJpbmcgaW4gYSB2YXJpZXR5IG9mIG1ldGhvZHMgZXhwbGFpbmVkIGVsc2V3aGVyZSBpbiB0aGlzIHRvb2wgYm94LCBzdWNoIGFzIC4uLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKAogICAgICAgICAgImxpIiwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoIlJvdXRlckxpbmsiLCB7IGF0dHJzOiB7IHRvOiAiL3Rvb2xzL3N0b3J5Ym9hcmQuaHRtbCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJTdG9yeWJvYXJkaW5nIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJsaSIsCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigiU21hbGwtZ3JvdXAgIiksCiAgICAgICAgICAgIF9jKCJSb3V0ZXJMaW5rIiwgeyBhdHRyczogeyB0bzogIi90b29scy9jYXJkLXNvcnRpbmcuaHRtbCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJjYXJkIHNvcnRpbmciKQogICAgICAgICAgICBdKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKAogICAgICAgICAgImxpIiwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoIlJvdXRlckxpbmsiLCB7IGF0dHJzOiB7IHRvOiAiL3Rvb2xzL2NyYXp5LWVpZ2h0cy5odG1sIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIkNyYXp5IGVpZ2h0cyIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiSW4gYW55IGNhc2UsIHRoZSBlbmQgZ29hbCBzaG91bGQgYmUgdG8gZ2VuZXJhdGUgYSBzeW50aGVzaXMgYXJ0aWZhY3Qgc3VjaCBhcyBhICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvdG9vbHMvam91cm5leS1tYXAuaHRtbCIgfSB9LCBbCiAgICAgICAgICAgIF92bS5fdigiam91cm5leSBtYXAiKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiwgc2V0IG9mICIpLAogICAgICAgICAgX2MoIlJvdXRlckxpbmsiLCB7IGF0dHJzOiB7IHRvOiAiL3Rvb2xzL3BlcnNvbmFzLmh0bWwiIH0gfSwgWwogICAgICAgICAgICBfdm0uX3YoInBlcnNvbmFzIikKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIsIG9yICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgeyBhdHRyczogeyB0bzogIi90b29scy9sb3ctZmlkZWxpdHktcHJvdG90eXBlLmh0bWwiIH0gfSwKICAgICAgICAgICAgW192bS5fdigibG93LWZpZGVsaXR5IHByb3RvdHlwZSIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiB0aGF0IG9mZmVycyBpbnNpZ2h0cyBib3RoIGxlYWRpbmcgdXAgdG8gdGhlIGNyZWF0aW9uIG9mIHRoZSBhcnRpZmFjdCBpdHNlbGYgYW5kIHRvIHRoZSBlbnRodXNpYXNtLCByZWFjdGlvbiwgYW5kIGluLXN0cmVhbSB0ZXN0aW5nIG9mIHlvdXIgdXNlcnMgYXMgdGhleSBoZWxwZWQgY3JlYXRlIGl0LiIKICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJsaW5rcy1hbmQtcmVzb3VyY2VzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNsaW5rcy1hbmQtcmVzb3VyY2VzIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgTGlua3MgYW5kIHJlc291cmNlcyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vbWVkaXVtLmNvbS9kZXNpZ24tcmVzZWFyY2gtbWV0aG9kcy9ob3ctdG8tdXNlLXBvc3QtaXQtbm90ZXMtOWNhMDkwNGEwM2QxIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiR2VuZXJhbCBzdGlja3kgbm90ZSBiZXN0IHByYWN0aWNlcyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9zdGF0aWMxLnNxdWFyZXNwYWNlLmNvbS9zdGF0aWMvNTdjNmI3OTYyOTY4N2ZkZTA5MGEwZmRkL3QvNTg5Y2M4NzgyZTY5Y2YwZGQ4MmI0NTA4LzE0ODY2Njk5NDQzNDYvSWRlYS1EYXNoYm9hcmQucGRmIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICdBIGJhc2ljICJpZGVhIGRhc2hib2FyZCIgZm9yIGEgY28tY3JlYXRpb24gc3RhcnRpbmcgcG9pbnQnCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIikKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vd3d3LmRlc2lnbmtpdC5vcmcvbWV0aG9kcy9jby1jcmVhdGlvbi1zZXNzaW9uIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJJREVPIGd1aWRlIHRvIGNvLWNyZWF0aW9uIGVzc2VudGlhbHMsIGluY2x1ZGluZyBjb252ZXJzYXRpb24gc3RhcnRlcnMgYW5kIG90aGVyIGFjdGl2aXRpZXMiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIikKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vdG9vbGtpdC5tb3ppbGxhLm9yZy9tZXRob2QvcGFydGljaXBhdG9yeS1kZXNpZ25jby1kZXNpZ24td29ya3Nlc3Npb24vIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF92bS5fdigiTW96aWxsYSBndWlkZSB0byBjby1jcmVhdGlvbiB3aXRoIHVzZXJzIiksCiAgICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL21ldGhvZHMuMThmLmdvdi9kaXNjb3Zlci9kZXNpZ24tc3R1ZGlvLyIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfdm0uX3YoIjE4RiBndWlkZSB0byBjby1jcmVhdGlvbiB3aXRoIGludGVybmFsIHN0YWtlaG9sZGVycyIpLAogICAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0KICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}