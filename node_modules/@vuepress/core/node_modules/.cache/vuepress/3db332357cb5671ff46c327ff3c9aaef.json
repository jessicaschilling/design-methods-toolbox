{"remainingRequest":"/Users/jessicaschilling/code/design-methods-toolbox/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jessicaschilling/code/design-methods-toolbox/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jessicaschilling/code/design-methods-toolbox/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jessicaschilling/code/design-methods-toolbox/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/jessicaschilling/code/design-methods-toolbox/docs/tools/problem-framing-reframing.md?vue&type=template&id=bd86055e&","dependencies":[{"path":"/Users/jessicaschilling/code/design-methods-toolbox/docs/tools/problem-framing-reframing.md","mtime":1613601636356},{"path":"/Users/jessicaschilling/code/design-methods-toolbox/node_modules/cache-loader/dist/cjs.js","mtime":1613587018354},{"path":"/Users/jessicaschilling/code/design-methods-toolbox/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1613587018634},{"path":"/Users/jessicaschilling/code/design-methods-toolbox/node_modules/cache-loader/dist/cjs.js","mtime":1613587018354},{"path":"/Users/jessicaschilling/code/design-methods-toolbox/node_modules/vue-loader/lib/index.js","mtime":1613587018634},{"path":"/Users/jessicaschilling/code/design-methods-toolbox/node_modules/@vuepress/markdown-loader/index.js","mtime":1613587018628}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJwcm9ibGVtLWZyYW1pbmctcmVmcmFtaW5nIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNwcm9ibGVtLWZyYW1pbmctcmVmcmFtaW5nIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUHJvYmxlbSBGcmFtaW5nICYgUmVmcmFtaW5nIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAicGhhc2Ut8J+OqC1wcm9ibGVtLXNoYXBpbmctZm9jdXMtY29udmVyZ2UiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3BoYXNlLfCfjqgtcHJvYmxlbS1zaGFwaW5nLWZvY3VzLWNvbnZlcmdlIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiUGhhc2U6IildKSwKICAgICAgICBfdm0uX3YoIiDwn46oIFByb2JsZW0gc2hhcGluZyIpLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoIkZvY3VzOiIpXSksCiAgICAgICAgX3ZtLl92KCIgQ29udmVyZ2UiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY3VzdG9tLWJsb2NrIHRpcCIgfSwgWwogICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImN1c3RvbS1ibG9jay10aXRsZSIgfSwgW192bS5fdigiSU4gQlJJRUYiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlRpbWUgY29tbWl0bWVudDoiKV0pLAogICAgICAgICAgX3ZtLl92KCIgMS0yIGhvdXJzIiksCiAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkRpZmZpY3VsdHk6IildKSwKICAgICAgICAgIF92bS5fdigiIE1vZGVyYXRlIiksCiAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIk1hdGVyaWFscyBuZWVkZWQ6IildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBNZWV0aW5nIHNwYWNlIChwaHlzaWNhbCBvciB2aXJ0dWFsKSwgd2hpdGVib2FyZCBhbmQgc3RpY2tpZXMgKHBoeXNpY2FsIG9yIHZpcnR1YWwpLCBwYXJ0aWNpcGFudHMgZnJvbSBhIHZhcmlldHkgb2YgdGVjaG5pY2FsIGFuZCBjdWx0dXJhbCBwZXJzcGVjdGl2ZXMgKHRoZSBtb3JlIG9mIHRoZXNlLCB0aGUgbW9yZSB1c2VmdWwpIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiV2hvIHNob3VsZCBwYXJ0aWNpcGF0ZToiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIFVzZXIgZXhwZXJpZW5jZSBkZXNpZ25lcnMsIHZpc3VhbCBkZXNpZ25lcnMsIHByb2R1Y3QvcHJvamVjdCBvd25lcnMsIGNvbW11bml0eSBzcGVjaWFsaXN0cywgZGV2ZWxvcGVycyIKICAgICAgICAgICksCiAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkJlc3QgZm9yOiIpXSksCiAgICAgICAgICBfdm0uX3YoJyBGaW5kaW5nIG5ldyB3YXlzIHRvIGFwcHJvYWNoICJ1bnNvbHZhYmxlIiBwcm9ibGVtcycpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiYWJvdXQtdGhpcy10b29sIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNhYm91dC10aGlzLXRvb2wiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEFib3V0IHRoaXMgdG9vbCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlByb2JsZW0gZnJhbWluZyAob3IgcmVmcmFtaW5nKSBjYW4gYmUgZXh0cmVtZWx5IGhlbHBmdWwgYXQgYW55IHN0YWdlIG9mIHRoZSBkZXNpZ24gcHJvY2VzcyB3aGVuIHlvdSd2ZSBoaXQgYSBzdGlja3kgc3BvdCwgYnV0IGl0J3MgcGFydGljdWxhcmx5IHVzZWZ1bCB3aGVuIHlvdSdyZSB0cnlpbmcgdG8gY29udmVyZ2UgZGl2ZXJnZW50IGlkZWF0aW9uIGludG8gYSBjb2hlcmVudCB3aG9sZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJJZiB5b3UncmUgXCJzaW1wbHlcIiB0cnlpbmcgdG8gZnJhbWUgYSBwcm9ibGVtIGZyb20gYSBsYXJnZSBhbW91bnQgb2YgaWRlYXRpb24gYXJ0aWZhY3RzLCBjb25zaWRlciB1c2luZyB0aGUgU3RhbmZvcmQgZC5zY2hvb2wncyBcImZpdmUgZWxlbWVudHNcIiBmcmFtZXdvcms6IDEuIFdoYXQ6IFdoYXQncyB0aGUgY2hhbGxlbmdlIHNwYWNlPyBPbiB3aGF0IGh1bWFuIGV4cGVyaWVuY2UgYXJlIHlvdSB0cnlpbmcgdG8gbWFrZSBhbiBpbXBhY3Q/IDIuIFdob206IFdoYXQncyB0aGUgZ3JvdXAgb2YgaHVtYW5zIGZvciB3aGljaCB5b3UncmUgZGVzaWduaW5nPyBJcyB5b3VyIGluaXRpYWwgZGVmaW5pdGlvbiBvZiB0aGF0IGdyb3VwIHBvdGVudGlhbGx5IHRvbyBicm9hZCAob2Z0ZW4gdGhlIGNhc2UpIG9yIHRvbyBuYXJyb3c/IDMuIENvbnRleHQ6IFdoYXQgZG8geW91IGFscmVhZHkga25vdyBhYm91dCB0aGUgaXNzdWVzLCBjb21wZXRpdG9ycywgb3Igb3RoZXIgZmFjdG9ycyB0aGF0IGNhbiBleHBsYWluIHdoeSB0aGUgY2hhbGxlbmdlIHRvIGhhbmQgbWF0dGVycz8gNC4gR29hbHM6IENhbiB5b3UgZXhwbGljaXRseSBzdGF0ZSB0aGUgZ29hbHMgb2YgdGhlIHByb2plY3Qgb3IgcHJvZHVjdD8gQXJlIHRoZXkgcXVhbnRpZmlhYmxlPyA1LiBBc3N1bXB0aW9uczogRG8geW91IGFscmVhZHkga25vdyB0aGF0IHlvdSd2ZSBtYWRlIHNvbWU/IERvIGFueSBvZiB0aG9zZSBhc3N1bXB0aW9ucyAiCiAgICAgICAgKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJoYXZlIildKSwKICAgICAgICBfdm0uX3YoIiB0byBiZSB0cnVlIGluIG9yZGVyIGZvciB5b3VyIHNvbHV0aW9uIHRvIGJlIGVmZmVjdGl2ZT8iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJPbiB0aGUgb3RoZXIgaGFuZCwgaWYgeW91J3ZlIGFscmVhZHkgYXR0ZW1wdGVkIHRvIGZyYW1lIGFuZCBkZWZpbmUgYSBwcm9ibGVtLCBidXQgYXJlbid0IHNhdGlzZmllZCB3aXRoIHRoZSByZXN1bHRzLCB5b3UgbWF5IG5lZWQgYSBtZXRob2QgZm9yIHJlLWZyYW1pbmcgdGhlIHByb2JsZW0sIHN1Y2ggYXM6IgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiUG93ZXJzIG9mIFRlbjogSW5jcmVhc2UgYW5kIGRlY3JlYXNlIHRoZSBtYWduaXR1ZGVzIG9mIHlvdXIgcHJvYmxlbSdzIGNvbnRleHQgdG8gc2VlIGlmIG5ldyBjb25uZWN0aW9ucyBvciBpbnNpZ2h0cyBlbWVyZ2UuIChXaGF0IGlmIHRoZSBudW1iZXIgb2Ygc2VlZCB1c2VycyBmb3IgeW91ciBwcm9kdWN0IG5lZWRlZCB0byBiZSBhbiBvcmRlciBvZiBtYWduaXR1ZGUgbGFyZ2VyPyBPciB5b3UgY291bGQgZ2V0IGJ5IHdpdGggYW4gb3JkZXIgb2YgbWFnbml0dWRlIHNtYWxsZXI/KSIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICdSZXZlcnNlIHRoaW5raW5nOiBGbGlwIHlvdXIgcHJvYmxlbSBvbiBpdHMgaGVhZCB0byBjb21lIHVwIHdpdGggbmV3IGlkZWFzLiBGb3IgZXhhbXBsZSwgaWYgdGhlIHF1ZXN0aW9uIGlzICJob3cgY2FuIHdlIGdldCBtb3JlIHBlb3BsZSB0byB1c2Ugb3VyIG9ubGluZSB0cmFpbmluZyBtYXRlcmlhbHM/IiwgaW5zdGVhZCBhc2sgdGhlICJyaWRpY3Vsb3VzIiBxdWVzdGlvbiBvZiAiaG93IGNhbiB3ZSBtYWtlIGl0IGFzIGRpZmZpY3VsdCBhbmQgdW5hcHBlYWxpbmcgYXMgcG9zc2libGUgZm9yIHBlb3BsZSB0byB0YWtlIG91ciBvbmxpbmUgY291cnNlcz8iJwogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIk5vbi1jdXN0b21lciAob3Igbm9uLXVzZXIpIHZpZXc6IEluIGEgc2ltaWxhciB2ZWluIHRvIHJldmVyc2UgdGhpbmtpbmcsIHRyeSBsb29raW5nIGF0IHlvdXIgcHJvYmxlbSBmcm9tIGEgbm9uLXVzZXIncyB2aWV3LiBXaHkgd29uJ3QgdGhleSB1c2UgeW91ciB0aGluZz8gVGhpcyBjb3VsZCBhbHNvIGluY2x1ZGUgc29vbi10by1iZSBub24tdXNlcnMsIG5vbi11c2VycyB3aG8gd2VyZSBvbmNlIHVzZXJzLCBub24tdXNlcnMgd2hvIGRvbid0IGtub3cgeW91ciB0aGluZyBleGlzdHMgeWV0LiIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJDb25zaWRlciB0aGF0IHByb2JsZW1zIGhpZGUgaW5zaWRlIG90aGVyIHByb2JsZW1zLCBhbmQgdGhlIGluaXRpYWwgcHJvYmxlbSBtaWdodCBub3QgYmUgdGhlIHJlbGV2YW50IG9uZTogVGhlIGNhbm9uaWNhbCBleGFtcGxlIGhlcmUgaXMgb2YgSGVucnkgRm9yZCBhc2tpbmcgd2hhdCB0aGUgdXNlciB3YW50cywgYW5kIGhlYXJpbmcgXCJhIGZhc3RlciBob3JzZS5cIiBCdXQsIG9mIGNvdXJzZSwgdGhlIHVzZXIgZG9lc24ndCBhY3R1YWxseSB3YW50IGEgZmFzdGVyIGhvcnNlOyBzaGUganVzdCBkb2Vzbid0IGtub3cgd2hhdCBzaGUgcmVhbGx5IHdhbnRzIGlzIHRvIG1vdmUgcXVpY2tseSwgYW5kIGEgaG9yc2UgZG9lc24ndCBoYXZlIHRvIGJlIHRoZSBtZWFucyBvZiBkb2luZyB0aGF0LiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJsaW5rcy1hbmQtcmVzb3VyY2VzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNsaW5rcy1hbmQtcmVzb3VyY2VzIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgTGlua3MgYW5kIHJlc291cmNlcyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vc3RhdGljMS5zcXVhcmVzcGFjZS5jb20vc3RhdGljLzU3YzZiNzk2Mjk2ODdmZGUwOTBhMGZkZC90LzU4YWY0ZDZiMTVkNWRiNWFjMjNhYmQxYy8xNDg3ODgzNjI4MjE4L0Rlc2lnbi1Qcm9qZWN0LVNjb3BpbmctR3VpZGUtVjQtcGFnZXMucGRmIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF92bS5fdigiRml2ZSBlbGVtZW50cyB0byBmcmFtZSBhIGNoYWxsZW5nZSAoc2VlIHBhZ2UgOCkiKSwKICAgICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIikKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vc3RhdGljMS5zcXVhcmVzcGFjZS5jb20vc3RhdGljLzU3YzZiNzk2Mjk2ODdmZGUwOTBhMGZkZC90LzViMTliMmYyYWE0YTk5ZTk5YjI2YjZiYi8xNTI4NDEwODc2MTE5L2RzY2hvb2xfYm9vdGxlZ19kZWNrXzIwMThfZmluYWxfc20rJTI4MiUyOS5wZGYiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJQb3dlcnMgb2YgVGVuIChzZWUgcGFnZSAyNykiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vaGJyLm9yZy8yMDE3LzAxL2FyZS15b3Utc29sdmluZy10aGUtcmlnaHQtcHJvYmxlbXMiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIkhhcnZhcmQgQnVzaW5lc3MgUmV2aWV3OiBBcmUgeW91IHNvbHZpbmcgdGhlIHJpZ2h0IHByb2JsZW1zPyIKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly93d3cuZmFzdGNvbXBhbnkuY29tLzMwNTAyNjUvdGhyZWUtd2F5cy10by1yZWZyYW1lLWEtcHJvYmxlbS10by1maW5kLWlubm92YXRpdmUtc29sdXRpb24iLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJGYXN0IENvbXBhbnkgb24gcmVmcmFtaW5nIHByb2JsZW1zIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3d3dy5taW5kdG9vbHMuY29tL3BhZ2VzL2FydGljbGUvbmV3Q1RfMDUuaHRtIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdignVHdvLWJ5LXR3by1iYXNlZCAicmVmcmFtaW5nIG1hdHJpeCInKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}