{"remainingRequest":"/Users/jessicaschilling/code/design-methods-toolbox/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jessicaschilling/code/design-methods-toolbox/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jessicaschilling/code/design-methods-toolbox/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jessicaschilling/code/design-methods-toolbox/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/jessicaschilling/code/design-methods-toolbox/docs/tools/low-fidelity-prototype.md?vue&type=template&id=d7ff3d82&","dependencies":[{"path":"/Users/jessicaschilling/code/design-methods-toolbox/docs/tools/low-fidelity-prototype.md","mtime":1613592179297},{"path":"/Users/jessicaschilling/code/design-methods-toolbox/node_modules/cache-loader/dist/cjs.js","mtime":1613587018354},{"path":"/Users/jessicaschilling/code/design-methods-toolbox/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1613587018634},{"path":"/Users/jessicaschilling/code/design-methods-toolbox/node_modules/cache-loader/dist/cjs.js","mtime":1613587018354},{"path":"/Users/jessicaschilling/code/design-methods-toolbox/node_modules/vue-loader/lib/index.js","mtime":1613587018634},{"path":"/Users/jessicaschilling/code/design-methods-toolbox/node_modules/@vuepress/markdown-loader/index.js","mtime":1613587018628}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJsb3ctZmlkZWxpdHktcHJvdG90eXBlIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNsb3ctZmlkZWxpdHktcHJvdG90eXBlIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgTG93IEZpZGVsaXR5IFByb3RvdHlwZSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInBoYXNlLfCfm6DvuI8tcHJvYmxlbS1zb2x2aW5nLWZvY3VzLXByb3RvdHlwZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjcGhhc2Ut8J+boO+4jy1wcm9ibGVtLXNvbHZpbmctZm9jdXMtcHJvdG90eXBlIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiUGhhc2U6IildKSwKICAgICAgICBfdm0uX3YoIiDwn5ug77iPICBQcm9ibGVtIHNvbHZpbmcgICB8ICAgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiRm9jdXM6IildKSwKICAgICAgICBfdm0uX3YoIiBQcm90b3R5cGUiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJUaW1lIGNvbW1pdG1lbnQ6IildKSwKICAgICAgICBfdm0uX3YoIiAxIG9yIG1vcmUgZGF5cywgZGVwZW5kaW5nIG9uIGNvbXBsZXhpdHkgb2YgcHJvdG90eXBlIiksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkRpZmZpY3VsdHk6IildKSwKICAgICAgICBfdm0uX3YoIiBNb2RlcmF0ZSIpLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJNYXRlcmlhbHMgbmVlZGVkOiIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBQcm90b3R5cGluZyB0b29scyAoU2tldGNoLCBJblZpc2lvbiwgY29kZSBJREUsIHBlbiwgcGVuY2lsLCBwb3RhdG8gc3RhbXAsIHdoYXRldmVyKSwgZmVlZGJhY2sgZm9ydW0gKHBoeXNpY2FsIG9yIHZpcnR1YWwpIgogICAgICAgICksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIldobyBzaG91bGQgcGFydGljaXBhdGU6IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIFVzZXIgZXhwZXJpZW5jZSBkZXNpZ25lcnMsIHByb2R1Y3QvcHJvamVjdCBvd25lcnMsIGRldmVsb3BlcnMiCiAgICAgICAgKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQmVzdCBmb3I6IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAnIENvbnZlcnRpbmcgYWdyZWVkLXVwb24gZGlyZWN0aW9ucyBmb3Igc29sdXRpb25zIGludG8gYSAibWluaW11bSBiZWxpZXZhYmxlIHByb2R1Y3QiIHRoYXQgY2FuIGJlIHRlc3RlZCB3aXRoIHVzZXJzIGJlZm9yZSBtb3ZpbmcgdG8gaGlnaGVyLWZpZGVsaXR5IHByb3RvdHlwaW5nJwogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiYWJvdXQtdGhpcy10b29sIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNhYm91dC10aGlzLXRvb2wiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEFib3V0IHRoaXMgdG9vbCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJ0xvdy1maWRlbGl0eSBwcm90b3R5cGluZyDigJQgd2hldGhlciBpbiB0aGUgZm9ybSBvZiB3aXJlZnJhbWVzLCBwYXBlciBwcm90b3R5cGVzLCBibGFjay1hbmQtd2hpdGUgcHJvdG90eXBlcyBvciBhbnl0aGluZyBzaG9ydCBvZiBhIGhpZ2gtZmlkZWxpdHksIHByb2R1Y3Rpb24tc2ltaWxhciBsZXZlbCDigJQgZW5hYmxlIHRoZSB0ZWFtIHRvIHF1aWNrbHkgdHJhbnNmb3JtIGRlY2lzaW9ucyBhYm91dCBzb2x1dGlvbnMgaW50byBhcnRpZmFjdHMgdGhhdCBjYW4gYmUgcmFwaWRseSB0ZXN0ZWQgYW5kIGl0ZXJhdGVkIHVwb24gd2l0aCB1c2VycyBiZWZvcmUgcHJvZ3Jlc3NpbmcgdG8gaGlnaC1maWRlbGl0eSBwcm90b3R5cGVzLiBJbiBsb3ctZmlkZWxpdHkgcHJvdG90eXBpbmcsIHlvdXIgZ29hbCBpcyB0byBjcmVhdGUgYSAibWluaW11bSBiZWxpZXZhYmxlIHByb2R1Y3QiOiBhbiBpdGVtIHRoYXQgY29udGFpbnMganVzdCBlbm91Z2ggc3RydWN0dXJlLCBzdWJzdGFuY2UgYW5kIGNvbnRlbnQgdG8gZW5hYmxlIHlvdSB0byB0ZXN0IHlvdXIgYXNzdW1wdGlvbnMgYW5kIG1vdmUgb24uJwogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiTG93LWZpZGVsaXR5IHByb3RvdHlwZXMgb2YgYW55IGtpbmQgZW1waGFzaXplIHN1YnN0YW5jZSBvdmVyIHN0eWxlLiBBZGRpbmcgYnJhbmRpbmcgZWxlbWVudHMsIGNvbG9ycywgZGlzdGluY3RpdmUgZm9udHMgYW5kIHRoZSBsaWtlIGFyZSwgYXQgdGhpcyBwb2ludCBpbiB0aGUgcHJvY2VzcywgcHJpbWFyaWx5IGRlY29yYXRpb24gYW5kIGRpc3RyYWN0aW9uIOKAlCBhbmQgaW4gZmFjdCwgYWRkaW5nIHRoZXNlIGl0ZW1zIGNhbiBpbmZlciB0aGluZ3MgdG8gdGhlIHVzZXIgdGhhdCB3aWxsIG11ZGR5IHVwIHRoZSByZXN1bHRzIG9mIHdoYXRldmVyIHRlc3RpbmcgeW91IGRvIG9uIHlvdXIgbG93LWZpIHByb3RvdHlwZXMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiTG93LWZpZGVsaXR5IHByb3RvdHlwZXMgYWxzbyBoYXZlIHRoZSB0cmVtZW5kb3VzIGFkdmFudGFnZXMgb2YgYmVpbmcgZWFzaWVyIHRvIGJ1aWxkLCBtb3JlIG5pbWJsZSB0byByZXdvcmssIGxlc3MgY29zdGx5IGluIHRpbWUgYW5kIGVmZm9ydCwgYW5kIG92ZXJhbGwgZW5hYmxlIG1vcmUgcmFwaWQgaXRlcmF0aW9uIHdpdGhvdXQgYW55IG1lbWJlcnMgb2YgdGhlIHRlYW0gcmlza2luZyBiZWNvbWluZyBlbW90aW9uYWxseSBhdHRhY2hlZCB0byB2aXN1YWwgZGVzaWduIHBhdHRlcm5zLiBPZnRlbiwgaXQncyBoZWxwZnVsIHRvIHN0YXJ0IHdpdGggYSBiYXJlIG1pbmltdW0gaW4gdGhlIGZvcm0gb2Ygd2lyZWZyYW1lcyBvciBwYXBlciBwcm90b3R5cGVzLCB0ZXN0IGh5cG90aGVzaXMsIGFuZCBvbmx5IHdoZW4gdGhvc2UgaHlwb3RoZXNlcyBhcmUgc2V0dGxlZCBtb3ZlIG9uIHRvIHRoZSBuZXh0IGxldmVsIG9mIGRldGFpbC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiV2lyZWZyYW1lcyBvciBwYXBlciBwcm90b3R5cGVzIGFyZSAuLi4iKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiUHJlbGltaW5hcnkgc2tldGNoZXMgb2Ygc3RydWN0dXJlLCBwbGFjZW1lbnQgb2YgaGllcmFyY2h5IikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJGcmVlIGZyb20gY29sb3JzLCBmb250cyBvciBhbnl0aGluZyBlbHNlIHRoYXQgbWlnaHQgYmUgYSBkaXN0cmFjdGlvbiB0byB0aGUgcGVvcGxlIGV2YWx1YXRpbmcgaXQiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiRWFzeSB0byByZXdvcmsgcXVpY2tseSBpbiByZXNwb25zZSB0byB0ZXN0aW5nIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJPZnRlbiBsb29rIGludGVudGlvbmFsbHkgc2tldGNoLXkgb3IgY2FydG9vbi15IHRvIGVtcGhhc2l6ZSB0byB0aGUgdmlld2VyIHRoYXQgdGhleSBhcmUgZXhwZXJpbWVudGFsIHdvcmsgaW4gcHJvZ3Jlc3MiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIkxvdy1maWRlbGl0eSBwcm90b3R5cGVzIGFyZSAuLi4iKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlNvbWV3aGF0IChvciBldmVuIGp1c3Qgc2xpZ2h0bHkpIG1vcmUgc29waGlzaXRpY2F0ZWQgdGhhdCB3aXJlZnJhbWVzIG9yIHBhcGVyIHByb3RvdHlwZXM7IHRoZXkgbWF5IGNvbnRhaW4gZGV0YWlscyB0aGF0IGVuYWJsZSB5b3UgdG8gdGVzdCBtb3JlIHNvcGhpc3RpY2F0ZWQgYXNzdW1wdGlvbnMiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiTW9yZSBsaWtlbHkgdG8gaW5jbHVkZSBhIHZhcmlldHkgb2YgcGFnZXMvc2NyZWVucyBhbmQgbWVjaGFuaXNtcyBmb3IgbW92aW5nIGJldHdlZW4gdGhlbSIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJTdGlsbCBub3QgYnVyZGVuZWQgYnkgY29sb3IsIHR5cG9ncmFwaHksIG9yIGJyYW5kaW5nLCBidXQgbW9yZSBsaWtlbHkgdG8gaW5kaWNhdGUgZGV0YWlscyBvZiBvdmVyYWxsIHBhZ2Ugc3RydWN0dXJlIGFuZCBoaWVyYXJjaHkgdGhhbiB3aXJlZnJhbWVzIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIktlZXAgaW4gbWluZCB0aGF0IGFueSBvZiB0aGVzZSBwcm90b3R5cGUgc3R5bGVzIGNvdWxkIGJlIG1hZGUgdXNpbmcgYSB2YXJpZXR5IG9mIHRvb2xzOyB1c2Ugd2hhdCB5b3UncmUgdGhlIG1vc3QgZmx1ZW50IGluLiBUaGlzIGNvdWxkIG1lYW4gdGVzdGluZyBwcm90b3R5cGVzIGJ1aWx0IGluIHNpbXBsZSBIVE1ML0NTUywgUG93ZXJQb2ludCwgUGhvdG9zaG9wLCBvciBwZW4gYW5kIHBlbmNpbCDigJQgd2hhdGV2ZXIgZW5hYmxlcyB5b3UgdG8gd29yayB0aGUgbW9zdCBxdWlja2x5LiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkZpbmFsbHksIHJlbWVtYmVyIHRoYXQgbWFueSBvZiB5b3VyIHByb3RvdHlwZXMgd2lsbCBmYWlsIGluIHRlc3Rpbmc7IHRoYXQncyBwcmVjaXNlbHkgd2h5IHRoZXkncmUgcHJvdG90eXBlcyEgSWYgeW91J3JlIGluIGEgcG9zaXRpb24gb2YgbGVhZGVyc2hpcCBvciBpbiBkaXJlY3QgaW5mbHVlbmNlIG9mIGxlYWRlcnNoaXAsIGJlIHN1cmUgdG8gY29udGludWUgdG8gY29udmV5IHRoZSBtZXNzYWdlIHRoYXQgZXZlbiBcImZhaWxlZFwiIHByb3RvdHlwZXMgcmVwcmVzZW50IHByb2dyZXNzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImxpbmtzLWFuZC1yZXNvdXJjZXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2xpbmtzLWFuZC1yZXNvdXJjZXMiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBMaW5rcyBhbmQgcmVzb3VyY2VzIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly93d3cuZGVzaWdua2l0Lm9yZy9tZXRob2RzL2RldGVybWluZS13aGF0LXRvLXByb3RvdHlwZSIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfdm0uX3YoIklERU8gZ3VpZGUgdG8gZGV0ZXJtaW5pbmcgd2hhdCB0byBwcm90b3R5cGUiKSwKICAgICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIikKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vbWV0aG9kcy4xOGYuZ292L21ha2Uvd2lyZWZyYW1pbmcvIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiMThGIGd1aWRlIHRvIHdpcmVmcmFtaW5nIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICJodHRwczovL3d3dy5pYm0uY29tL2Nsb3VkL2dhcmFnZS9wcmFjdGljZXMvdGhpbmsvZW50ZXJwcmlzZS1kZXNpZ24tdGhpbmtpbmcvcHJhY3RpY2Vfd2lyZWZyYW1lcyIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfdm0uX3YoIldoZW4gdG8gd2lyZWZyYW1lLCB3aGVuIHRvIHByb3RvdHlwZSIpLAogICAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly93d3cuaW50ZXJhY3Rpb24tZGVzaWduLm9yZy9saXRlcmF0dXJlL2FydGljbGUvd2hhdC1raW5kLW9mLXByb3RvdHlwZS1zaG91bGQteW91LWNyZWF0ZSIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfdm0uX3YoIk1vcmUgb24gd2hhdCBraW5kIG9mIHByb3RvdHlwZSB0byBjcmVhdGUiKSwKICAgICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIikKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vdG9vbGtpdC5tb3ppbGxhLm9yZy9tZXRob2QvY2xpY2stdGhyb3VnaC1pbnRlcmFjdGl2ZS1wcm90b3R5cGUvIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJNb3ppbGxhIGd1aWRlIHRvIGNyZWF0aW5nIGNsaWNrYWJsZSBwcm90b3R5cGVzIGluIFBvd2VyUG9pbnQvS2V5bm90ZSIKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly90b29sa2l0Lm1vemlsbGEub3JnL21ldGhvZC9wYXBlci1wcm90b3R5cGUvIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF92bS5fdigiTW96aWxsYSBndWlkZSB0byBjcmVhdGluZyBwYXBlciBwcm90b3R5cGVzIiksCiAgICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICJodHRwczovL3d3dy5pbnRlcmFjdGlvbi1kZXNpZ24ub3JnL2xpdGVyYXR1cmUvYXJ0aWNsZS9wcm90b3R5cGluZy1sZWFybi1laWdodC1jb21tb24tbWV0aG9kcy1hbmQtYmVzdC1wcmFjdGljZXMiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIlR5cGVzIG9mIHByb3RvdHlwZXMgYmV5b25kIGp1c3Qgd2lyZWZyYW1lcywgbG93LWZpIGFuZCBoaWdoLWZpIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICJodHRwczovL3d3dy5jcy5jbXUuZWR1L35iYW0vdWljb3Vyc2UvQnV4dG9uLVNrZXRjaGVzUHJvdG90eXBlcy5wZGYiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJXaGF0IHByb3RvdG95cGVzIGFyZSBhbmQgYXJlIG5vdCIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9zdGF0aWMxLnNxdWFyZXNwYWNlLmNvbS9zdGF0aWMvNTdjNmI3OTYyOTY4N2ZkZTA5MGEwZmRkL3QvNThlZDIwMDVkYjI5ZDZjYTA1MDlhMmU1LzE0OTE5MzUyMzczODAvUHJvdG90eXBpbmctRGFzaGJvYXJkcyslMjgyJTI5LnBkZiIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfdm0uX3YoIlN5bXBhdGh5LWJhc2VkIHByb3RvdHlwZXMgdnMgc29sdXRpb24tYmFzZWQgcHJvdG90eXBlcyIpLAogICAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0KICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}