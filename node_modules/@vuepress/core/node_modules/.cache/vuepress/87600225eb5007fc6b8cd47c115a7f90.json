{"remainingRequest":"/Users/jessicaschilling/code/design-methods-toolbox/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jessicaschilling/code/design-methods-toolbox/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jessicaschilling/code/design-methods-toolbox/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jessicaschilling/code/design-methods-toolbox/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/jessicaschilling/code/design-methods-toolbox/docs/tools/primary-research.md?vue&type=template&id=2043c026&","dependencies":[{"path":"/Users/jessicaschilling/code/design-methods-toolbox/docs/tools/primary-research.md","mtime":1613601636352},{"path":"/Users/jessicaschilling/code/design-methods-toolbox/node_modules/cache-loader/dist/cjs.js","mtime":1613587018354},{"path":"/Users/jessicaschilling/code/design-methods-toolbox/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1613587018634},{"path":"/Users/jessicaschilling/code/design-methods-toolbox/node_modules/cache-loader/dist/cjs.js","mtime":1613587018354},{"path":"/Users/jessicaschilling/code/design-methods-toolbox/node_modules/vue-loader/lib/index.js","mtime":1613587018634},{"path":"/Users/jessicaschilling/code/design-methods-toolbox/node_modules/@vuepress/markdown-loader/index.js","mtime":1613587018628}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}