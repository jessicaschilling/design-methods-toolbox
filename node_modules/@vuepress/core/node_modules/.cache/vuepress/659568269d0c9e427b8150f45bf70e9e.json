{"remainingRequest":"/Users/jessicaschilling/code/design-methods-toolbox/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jessicaschilling/code/design-methods-toolbox/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jessicaschilling/code/design-methods-toolbox/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jessicaschilling/code/design-methods-toolbox/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/jessicaschilling/code/design-methods-toolbox/docs/README.md?vue&type=template&id=c6f5370e&","dependencies":[{"path":"/Users/jessicaschilling/code/design-methods-toolbox/docs/README.md","mtime":1613603963701},{"path":"/Users/jessicaschilling/code/design-methods-toolbox/node_modules/cache-loader/dist/cjs.js","mtime":1613587018354},{"path":"/Users/jessicaschilling/code/design-methods-toolbox/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1613587018634},{"path":"/Users/jessicaschilling/code/design-methods-toolbox/node_modules/cache-loader/dist/cjs.js","mtime":1613587018354},{"path":"/Users/jessicaschilling/code/design-methods-toolbox/node_modules/vue-loader/lib/index.js","mtime":1613587018634},{"path":"/Users/jessicaschilling/code/design-methods-toolbox/node_modules/@vuepress/markdown-loader/index.js","mtime":1613587018628}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJ3ZWxjb21lIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiN3ZWxjb21lIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgV2VsY29tZSEiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6ICIvaW1nL2Rlc2lnbi10b29sYm94LWhlYWRlci5wbmciLAogICAgICAgICAgICBhbHQ6ICJUaHJlZSBkZXNpZ24gcGhhc2VzIgogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImJsb2NrcXVvdGUiLCBbCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfYygiZW0iLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiVGhlcmUgaXMgbm8gb25lIG1ldGhvZCB0byBmb2xsb3cgdG8gY3JlYXRlIHBlcmZlY3QgcHJvZHVjdHMuIEJ1dCB0aGVyZSBhcmUgbWFueSB3YXlzIHRvIGluY3JlYXNlIHRoZSBvZGRzLiBPbmUgb2YgdGhlbSBpcyB0byB1bmRlcnN0YW5kIHRoZSByZWFzb24gZm9yIHRoZSB0b29sIGluIHRoZSBmaXJzdCBwbGFjZS4gRGVlcGx5IGludmVzdGlnYXRlIHdoYXQgcGVvcGxlIGFyZSB0cnlpbmcgdG8gZ2V0IGRvbmUgYW5kIGxpbmUgdXAgeW91ciBzb2x1dGlvbnMgdG8gbWF0Y2guIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCLigJQgSW5kaSBZb3VuZywgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICJodHRwczovL3d3dy5hbWF6b24uY29tL01lbnRhbC1Nb2RlbHMtQWxpZ25pbmctU3RyYXRlZ3ktQmVoYXZpb3IvZHAvMTkzMzgyMDA2MyIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIk1lbnRhbCBNb2RlbHM6IEFsaWduaW5nIERlc2lnbiBTdHJhdGVneSB3aXRoIEh1bWFuIEJlaGF2aW9yIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIikKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJhYm91dC10aGUtZGVzaWduLW1ldGhvZHMtdG9vbGJveCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjYWJvdXQtdGhlLWRlc2lnbi1tZXRob2RzLXRvb2xib3giIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBBYm91dCB0aGUgRGVzaWduIE1ldGhvZHMgVG9vbGJveCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoaXMgdG9vbGJveCBpcyBhbiBvcGVuLXNvdXJjZSByZWZlcmVuY2UgaW50ZW5kZWQgdG8gaGVscCB5b3UgZXhwbG9yZSBob3cgZG9pbmcgZGVzaWduIHN0cmF0ZWd5LCByZXNlYXJjaCBhbmQgdGVzdGluZyBjYW4gaW1wcm92ZSB5b3VyIGRheS10by1kYXkgd29yayBsaWZlIOKAlCBhbmQgaGVscCB1cyBhbGwgYnVpbGQgYmV0dGVyIHN0dWZmIGZvciB0aGUgdXNlcnMgd2UncmUgc3RyaXZpbmcgdG8gc2VydmUuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAid2hhdC10aGlzLXRvb2xib3gtaXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3doYXQtdGhpcy10b29sYm94LWlzIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgV2hhdCB0aGlzIHRvb2xib3ggaXMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygKICAgICAgICAgICJsaSIsCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiQSBjb2xsZWN0aW9uIG9mIGtub3duLXVzZWZ1bCBmcmFtZXdvcmtzIGFuZCBtZXRob2RvbG9naWVzICh0aGUgIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvdG9vbHMvIiB9IH0sIFsKICAgICAgICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJ0b29scyIpXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiKSBmb3IgZG9pbmcgZGVzaWduIHN0cmF0ZWd5LCByZXNlYXJjaCwgYW5kIHRlc3RpbmciKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkd1aWRhbmNlIG9uIHRoZSBhbW91bnQgb2YgdGltZSwgZWZmb3J0LCBhcnRpZmFjdHMgYW5kIGV4cGVyaWVuY2UgZWFjaCB0b29sIHJlcXVpcmVzLCBzbyB5b3UgY2FuIGRldGVybWluZSB3aGV0aGVyIHlvdSB3YW50IHRvIERJWSwgYXNrIGZvciBoZWxwIHdpdGhpbiB5b3VyIGNvbW11bml0eSBvciBjb21wYW55LCBvciBicmluZyBpbiBvdXRzaWRlIGFzc2lzdGFuY2UiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiQSBjYWxsIGZvciB5b3Ug4oCUIHdob2V2ZXIgeW91IGFyZSBhbmQgd2hhdGV2ZXIgeW91IG1pZ2h0IGRvIOKAlCB0byBhZGQgbmV3IHRvb2xzLCBjb21tZW50IG9uIGV4aXN0aW5nIG9uZXMsIG9yIHN1Z2dlc3QgcmV2aXNpb25zISIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJJbiBwYXJ0aWN1bGFyLCB0aGlzIHRvb2xib3ggYWltcyB0byBvcHRpbWl6ZSB0aGVzZSB0b29scyBmb3IgYXN5bmNocm9ub3VzL2Rpc3RyaWJ1dGVkIG9yZ3MsIGJlY2F1c2UgYXN5bmMgYW5kIGRpc3RyaWJ1dGVkIG9yZ3MgaGF2ZSBib3RoIHNwZWNpYWwgcG93ZXJzIGFuZCBzcGVjaWFsIG5lZWRzLiBGb3IgZXhhbXBsZSwgYSB0b29sIGxpa2UgIgogICAgICAgICksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiY29udGV4dHVhbCBpbnF1aXJ5IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGlzIHRyYWRpdGlvbmFsbHkgaGVhdnkgb24gaW4tcGVyc29uIHdvcmssIGNhbGxpbmcgZm9yIGZvbGxvd2luZyB0aGUgdXNlciBhcm91bmQgYXMgdGhleSBlbmdhZ2UgaW4gZGF5LXRvLWRheSBhY3Rpdml0eS4gVGhhdCBkb2Vzbid0IHdvcmsgZm9yIHVzIGluIGRpc3RyaWJ1dGVkbGFuZCwgc28gdGhpcyB0b29sYm94IHByb3ZpZGVzIG1vZGlmaWNhdGlvbnMsIG9wdGltaXphdGlvbnMsIG9yIGp1c3Qgc3VnZ2VzdGlvbnMgZm9yIHRvb2xzIHRoYXQgd29yayBiZXR0ZXIgaW4gb3VyIHdvcmxkLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIndoYXQtdGhpcy10b29sYm94LWlzbi10IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiN3aGF0LXRoaXMtdG9vbGJveC1pc24tdCIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFdoYXQgdGhpcyB0b29sYm94IGlzbid0IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoCiAgICAgICAgICAibGkiLAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoIkEgc3RhbmRhcmQgZm9yIGhvdyB5b3UgIiksCiAgICAgICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoIm11c3QiKV0pLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBkbyBkZXNpZ24gc3RyYXRlZ3kvcmVzZWFyY2gvdGVzdGluZzsgaXQncyBhIGZyYW1ld29yaywgbm90IGEgcmVsaWdpb24uIChJbiBmYWN0LCBpZiB5b3UgZG9uJ3QgbGlrZSBvdXIgcGhhc2VkIGFwcHJvYWNoLCB3ZSd2ZSBhbHNvIGFkZGVkIHNvbWUgbm90ZXMgb24gIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvcGhhc2VzLWFuZC1zcHJpbnRzLmh0bWwiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJob3cgb3RoZXJzIGFwcHJvYWNoIGRlc2lnbiBwaGFzZXMsIGluY2x1ZGluZyBkZXNpZ24gc3ByaW50cyIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIi4pIikKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkEgaG93LXRvIGZvciB0YWN0aWNhbCAiKSwKICAgICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoImRlc2lnbiBpbXBsZW1lbnRhdGlvbiIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICI6IElmIHlvdSB3YW50IHRvIGhhdmUgc29tZW9uZSBtYWtlIHlvdSBhIGxvZ28sIHBvc3Rlciwgd2Vic2l0ZSBvciBvdGhlciB2aXN1YWwgZGVzaWduIG9yIGZyb250LWVuZCBhcnRpZmFjdCwgdGhlcmUgYXJlIG1pbGxpb25zIG9mIGZvbGtzIG91dCB0aGVyZSB3aG8gY2FuIGhlbHAgeW91IHdpdGggdGhhdC4iCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAnQSBjaGVja2xpc3QgZm9yICJkbyB0aGVzZSB0aGluZ3MgYW5kIHlvdVwnbGwgcmVhY2ggdXNlci1jZW50ZXJlZCBuaXJ2YW5hLiIgSnVzdCBsaWtlIGFueSBvdGhlciB0aGluZyB3b3J0aCBkb2luZywgZGVzaWduIGNhbiBiZSBtdWx0aXZhcmlhdGUsIGZydXN0cmF0aW5nIG9yIGRpZmZpY3VsdCBhdCB0aW1lcyEnCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDMiLAogICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJvdXItdGhyZWUtcGhhc2UtYXBwcm9hY2gtdG8tZGVzaWduLW1ldGhvZHMiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI291ci10aHJlZS1waGFzZS1hcHByb2FjaC10by1kZXNpZ24tbWV0aG9kcyIgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgT3VyIHRocmVlLXBoYXNlIGFwcHJvYWNoIHRvIGRlc2lnbiBtZXRob2RzIikKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KCJJbnNpZGUgdGhpcyB0b29sYm94IHlvdSdsbCBmaW5kIGEgd2lkZSByYW5nZSBvZiAiKSwKICAgICAgICAgIF9jKCJSb3V0ZXJMaW5rIiwgeyBhdHRyczogeyB0bzogIi90b29scy8iIH0gfSwgW192bS5fdigidG9vbHMiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIOKAlCB0aGF0J3MgZ3JlYXQhIEJ1dCBpdCBjYW4gYmUgZGlmZmljdWx0IHRvIGRldGVybWluZSB3aGVuIHRvIHVzZSB3aGF0IHRvb2wgZm9yIHRoZSB0YXNrIGF0IGhhbmQsIHNvIHdlJ3ZlIHNlcGFyYXRlZCBvdXIgYXBwcm9hY2ggaW50byB0aHJlZSAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoImVtIiwgW192bS5fdigicGhhc2VzIildKSwKICAgICAgICAgIF92bS5fdigiOiIpCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigi8J+UjiAiKSwgX2MoInN0cm9uZyIsIFtfdm0uX3YoInByb2JsZW0gc2Vla2luZyIpXSldKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCLwn46oICIpLCBfYygic3Ryb25nIiwgW192bS5fdigicHJvYmxlbSBzaGFwaW5nIildKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIvCfm6DvuI8gIiksIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJwcm9ibGVtIHNvbHZpbmciKV0pXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkFuZCwgd2l0aGluIGVhY2ggb2YgdGhvc2UgdGhyZWUgcGhhc2VzIGFyZSAiKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJhcmVhcyBvZiBmb2N1cyIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiB0byBoZWxwIGtlZXAgdXMsIHdlbGwsIGZvY3VzZWQuIEVhY2ggdG9vbCBpbiB0aGlzIHRvb2xib3ggaXMgbGFiZWxlZCB3aXRoIGJvdGggYSBwaGFzZSBhbmQgYW4gYXJlYSBvZiBmb2N1cyB0byBoZWxwIHlvdSBkZXRlcm1pbmUgd2hlcmUgaXQgZml0cyBpbnRvIHRoZSBvdmVyYWxsIGRlc2lnbiBtZXRob2RzIGxhbmRzY2FwZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoIkltcG9ydGFudCBub3RlOiIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBXaGlsZSB0aGUgcGhhc2VzIGFuZCBmb2NpIGJlbG93IGFyZSBpbiBhbiBvcmRlciB0aGF0IG9mdGVuIG9jY3VycyBuYXR1cmFsbHkgaW4gdGhlIGRlc2lnbiBwcm9jZXNzLCBkb24ndCBiZSBhZnJhaWQgdG8gdGFja2xlIHRoZXNlIG91dCBvZiBvcmRlciDigJQgb3IsIGlmIHlvdSBkaXNjb3ZlciBzb21ldGhpbmcgaW4gYSBcImxhdGVyXCIgcGhhc2UgdGhhdCBoYXMgYW4gZWZmZWN0IG9uIHNvbWV0aGluZyB0aGF0IGhhcHBlbmVkIGVhcmxpZXIsIGRvbid0IGJlIGFmcmFpZCB0byBnbyBiYWNrIGFuZCByZXBlYXQgb3IgcmVzdGFydCBhcyBuZWNlc3NhcnkuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsgc3JjOiAiL2ltZy9kZXNpZ24tcGhhc2VzLnBuZyIsIGFsdDogIlRocmVlIGRlc2lnbiBwaGFzZXMiIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICLwn5SOLXByb2JsZW0tc2Vla2luZyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIj8J+Uji1wcm9ibGVtLXNlZWtpbmciIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiDwn5SOICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJQcm9ibGVtIHNlZWtpbmciKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImVtIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVW5kZXJzdGFuZGluZyBhbmQgZGVmaW5pbmcgdGhlIHByb2JsZW0gb3Igb3Bwb3J0dW5pdHkg4oCUIGZyb20gdGhlIHVzZXIncyBwb2ludCBvZiB2aWV3LCBub3QgdGhlIHByb3ZpZGVyJ3MuIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJMYW5kc2NhcGU6IildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBSZXNlYXJjaCB0aGUgY3VycmVudCBzdGF0ZSBvZiBzb2x1dGlvbnMgKG9yIGxhY2sgdGhlcmVvZikgZnJvbSB0aGUgdXNlcidzIHBlcnNwZWN0aXZlIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJFbXBhdGhpemU6IildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBEaXNjb3ZlciB1c2VycycgcHJpbWFyeSB1c2UgY2FzZXMsIHR5cGljYWwgam91cm5leXMsIHBhaW4gcG9pbnRzLCBhbmQgaWRlYWwgZW5kIHN0YXRlcyIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiU3ludGhlc2l6ZToiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIEdyb3VwIHVzZXJzIGFjY29yZGluZyB0byB0aGUgbW9zdCBhcHByb3ByaWF0ZSBheGVzIGZvciB0aGUgcHJvYmxlbSBhbmQgdXNlIHRob3NlIGdyb3VwcyBmb3IgZ3VpZGFuY2UgZ29pbmcgZm9yd2FyZCIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICLwn46oLXByb2JsZW0tc2hhcGluZyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIj8J+OqC1wcm9ibGVtLXNoYXBpbmciIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiDwn46oICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJQcm9ibGVtIHNoYXBpbmciKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImVtIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiUmV2aXNpbmcsIHJlZnJhbWluZyBvciByZWRlZmluaW5nIHRoZSBwcm9ibGVtIGFzIG5lY2Vzc2FyeSBpbiBvcmRlciB0byBpZGVhdGUgYW5kIGl0ZXJhdGUgdXBvbiBpZGVhcyBmb3Igc29sdXRpb25zLiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiRGl2ZXJnZToiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIEJyYWluc3Rvcm0sIHRoaW5rIG91dHNpZGUgdGhlIGJveCwgY29tZSB1cCB3aXRoIGlkZWFzLCBwYWluIHBvaW50cywgb3Bwb3J0dW5pdGllcyBhbmQgcG90ZW50aWFsIGRpcmVjdGlvbnMiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkNvbnZlcmdlOiIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgRmluZCBwYXR0ZXJucywgc3ludGhlc2l6ZSwgZmluZCBpbnNpZ2h0cyB0b3dhcmQgc29sdXRpb25zIG9yIG9wcG9ydHVuaXRpZXMgZm9yIGNoYW5nZSIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQWxpZ246IildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBEZWNpZGUgb24gb25lIChvciBzZXZlcmFsKSBkaXJlY3Rpb25zIGZvciBwcm90b3R5cGluZyBhbmQgdGVzdGluZyBhbmQgZGVmaW5lIHN1Y2Nlc3MgZm9yIGVhY2ggb2YgdGhlbSIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICLwn5ug77iPLXByb2JsZW0tc29sdmluZyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIj8J+boO+4jy1wcm9ibGVtLXNvbHZpbmciIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiDwn5ug77iPICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJQcm9ibGVtIHNvbHZpbmciKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImVtIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiQnVpbGRpbmcgcm91Z2ggZHJhZnRzIG9mIHRob3NlIHNvbHV0aW9ucyBpbiBvcmRlciB0byB0ZXN0IHRoZW0gb24gcmVhbCBodW1hbnMsIHVzaW5nIHRoZSBsZWFybmluZ3MgdG8gZWl0aGVyIHJldHVybiB0byBlYXJsaWVyIHN0YWdlcyBhcyBuZWVkZWQgb3IgZGVjbGFyZSBhIHNvbHV0aW9uIHJlYWR5IGZvciBwcm9kdWN0aW9uLWdyYWRlIGRlc2lnbiBhbmQgYnVpbGQuIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJQcm90b3R5cGU6IildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgJyBDcmVhdGUgYSAibWluaW11bSBiZWxpZXZhYmxlIHByb2R1Y3QiIHRoYXQgZW5hYmxlcyB5b3UgdG8gdGVzdCBpbiB3YXlzIHRoYXQgbWVhc3VyZSBhIHNvbHV0aW9uXCdzIHN1Y2Nlc3MnCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlRlc3Q6IildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBFdmFsdWF0ZSB5b3VyIHByb3RvdHlwZSAob3IgYW55dGhpbmcgZWxzZSB5b3XigJl2ZSBjcmVhdGVkIGVhcmxpZXIgaW4gdGhlIHByb2Nlc3MpIHdpdGggcmVhbCBodW1hbnMgYW5kIG1lYXN1cmUgaXRzIHBlcmZvcm1hbmNlIGFnYWluc3QgeW91ciBkZWZpbml0aW9uIG9mIHN1Y2Nlc3MiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiZGVzaWduLW1ldGhvZHMtZGVzaWduLXRoaW5raW5nIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNkZXNpZ24tbWV0aG9kcy1kZXNpZ24tdGhpbmtpbmciIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoJyBEZXNpZ24gbWV0aG9kcyA9ICJkZXNpZ24gdGhpbmtpbmciPycpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJ1dlbGwsIHllcyBhbmQgbm8uIE9uIHRoZSAieWVzIiBzaWRlLCB0aGUgbWV0aG9kcyBvZmZlcmVkIGluIHRoaXMgdG9vbGJveCBhcmUgaW50ZW5kZWQgdG8gcHJldHR5IG11Y2ggZXhhY3RseSBlcXVpcCB5b3Ugd2l0aCB3aGF0IGdvb2Qgb2xcJyAnCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRGVzaWduX3RoaW5raW5nIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJXaWtpcGVkaWEiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiIGRlZmluZXMgYXMgZGVzaWduIHRoaW5raW5nOiAiKSwKICAgICAgICBfYygiZW0iLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJ0aGUgY29nbml0aXZlLCBzdHJhdGVnaWMgYW5kIHByYWN0aWNhbCBwcm9jZXNzZXMgYnkgd2hpY2ggZGVzaWduIGNvbmNlcHRzIChwcm9wb3NhbHMgZm9yIG5ldyBwcm9kdWN0cywgYnVpbGRpbmdzLCBtYWNoaW5lcywgZXRjLikgYXJlIGRldmVsb3BlZCBieSBkZXNpZ25lcnMgYW5kL29yIGRlc2lnbiB0ZWFtcy4iCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkhvd2V2ZXIiKV0pLAogICAgICAgIF92bS5fdigiLCB0aGlzIHRvb2xib3ggZ29lcyBleHRlbmRzIGJleW9uZCBtZXRob2RzIGZvciAiKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJnZW5lcmF0aW5nIildKSwKICAgICAgICBfdm0uX3YoIiBjb25jZXB0cyB0byBpbmNsdWRlIG1ldGhvZHMgZm9yICIpLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoInRlc3RpbmciKV0pLAogICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJ2YWxpZGF0aW5nIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIHRoZW0uIFN0YW5mb3JkIFVuaXZlcnNpdHkgcHJvZmVzc29yIChhbmQgZmVsbG93IGF0IGRlc2lnbiBjb25zdWx0YW5jeSBJREVPLCBvZiBkZXNpZ24gdGhpbmtpbmcgZmFtZS9pbmZhbXkpIEJhcnJ5IEthdHogc3VjY2luY3RseSAiCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgImh0dHBzOi8vdXhkZXNpZ24uY2MvaXMtZGVzaWduLXRoaW5raW5nLWEtbWV0aG9kLW9mLWRlc2lnbi1uby03YzdmY2ExYmE3YzYiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoInN0YXRlcyB0aGUgZGlmZmVyZW5jZSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgaGVyZSDigJQgZXZlbiBnb2luZyBzbyBmYXIgYXMgdG8gcmVmZXIgdG8gYSBtZXRob2RzIHRvb2xraXQhIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiYmxvY2txdW90ZSIsIFsKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgJyJEZXNpZ24gbWV0aG9kIGVtcGhhc2l6ZXMg4oCcZG9pbmfigJ07IGRlc2lnbiB0aGlua2luZyBlbXBoYXNpemVzIOKAnHRoaW5raW5n4oCdLiBJZiB3ZSB0aGluayBvZiBkZXNpZ24gbWV0aG9kIGFzIGEgdG9vbGtpdCB3aGljaCBjb250YWlucyBhbGwga2luZHMgb2YgdG9vbHMgdGhhdCBjb3VsZCBiZSB1c2VkIGR1cmluZyBkZXNpZ24gcHJvYmxlbSBzb2x2aW5nLCBkZXNpZ24gdGhpbmtpbmcgaXMgaG93IHlvdSB1c2UgdGhpcyB0b29sa2l0LiInCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDMiLAogICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJzb21lLXdheXMtdGhlc2UtZGVzaWduLW1ldGhvZHMtY2FuLWhlbHAteW91IiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNzb21lLXdheXMtdGhlc2UtZGVzaWduLW1ldGhvZHMtY2FuLWhlbHAteW91IiB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBTb21lIHdheXMgdGhlc2UgZGVzaWduIG1ldGhvZHMgY2FuIGhlbHAgeW91IikKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiUmVnYXJkbGVzcyBvZiB3aGF0IHlvdSBjYWxsIHRoZSB0b29scyBpbiB0aGlzIHRvb2xib3gsIHNlbGVjdGluZyBhbmQgaW1wbGVtZW50aW5nIHRoZSByaWdodCBvbmVzIGNhbiBoYXZlIGEgYmlnIGltcGFjdCBvbiB5b3VyIHByb2plY3Qgb3IgcHJvZHVjdDoiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIlRoZXkgY2FuIGhlbHAgeW91IGRlZmluZSAob3IgZXZlbiByZXNvbHZlKSAiKSwKICAgICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoIndpY2tlZCBwcm9ibGVtcyIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIg4oCUIHRoZXNlIGFyZSBpbGwtZGVmaW5lZCwgaW50ZXJ0d2luZ2xlZCBvciBvdGhlcndpc2UgdHJpY2t5IChhcyBvcHBvc2VkIHRvIHRhbWUgb3Igd2VsbC1kZWZpbmVkKSBwcm9ibGVtcyIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJUaGV5IGNhbiBnaXZlIHlvdSBzb2x1dGlvbnMtZm9jdXNlZCAocmF0aGVyIHRoYW4gcHJvYmxlbS1mb2N1c2VkKSBtZXRob2RvbG9naWVzIGZvciBhcHByb2FjaGluZyB0aG9zZSBwcm9ibGVtcyIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJUaGV5IGNhbiBoZWxwIHlvdSByZS1mcmFtZSBhIHByb2JsZW0g4oCUIG9yIGV2ZW4gaXRzIGVudGlyZSBjb250ZXh0IOKAlCB0byBzdWdnZXN0IGdvb2QgbmV4dCBzdGVwcyIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJCZWNhdXNlIHRoZXkncmUgb2JzZXJ2YXRpb24tYmFzZWQsIHRoZXkga2VlcCB0aGUgdXNlciBpbiBtaW5kIGZyb20gdGhlIHZlcnkgYmVnaW5uaW5nIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlRoZXkncmUgdmVyc2F0aWxlIGFuZCBmbHVpZCwgbWFraW5nIHVzZSBvZiB3aGF0ZXZlciBtb2RlbCBpcyBiZXN0IGZvciBhIHBhcnRpY3VsYXIgcHJvYmxlbTsgdGhpcyBjb3VsZCBiZSB2aXN1YWwgbGFuZ3VhZ2UsIGNvZGUsIHdyaXR0ZW4gY29udGVudCwgcHJvdG90eXBpbmcsIGV0YyIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICdUaGV5IGVuYWJsZSBpdGVyYXRpdmUgImNvLWV2b2x1dGlvbiIgb2YgYm90aCBwcm9ibGVtcyBhbmQgc29sdXRpb25zLCBmcmVlbHkgYWNrbm93bGVkZ2luZyB0aGF0IG5ldyBzb2x1dGlvbnMgbWlnaHQgbGVhZCB0byBkaWZmZXJlbnQgdGFrZXMgb24gdGhlIG9yaWdpbmFsIHByb2JsZW0sIGFuZCBzbyBvbiBhbmQgc28gb24gLi4uJwogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlRoZXkncmUgdHJ1bHkgYWdpbGU6IFdoaWxlIHRoaXMgdG9vbGJveCBvZmZlcnMgYSBtdWx0aS1waGFzZSBmcmFtZXdvcmsgZm9yIGFwcHJvYWNoaW5nIHByb2JsZW1zLCBpdCdzIGFsc28gaW1wb3J0YW50IHRvIHJlbWVtYmVyIHRoYXQgdGhlc2UgYXJlIGFsbW9zdCBhbHdheXMgb3ZlcmxhcHBpbmcsIGNvbnRpbnVvdXMgc3RhZ2VzIHJhdGhlciB0aGFuIG9yZGVybHksIGxpbmVhciBzdGVwcywgd2l0aCBwbGVudHkgb2YgaW50ZXJlc3RpbmcgYW5kIHVzZWZ1bCBkaXZlcnNpb25zIGFuZCBsb29wYmFja3MgYWxvbmcgdGhlIHdheSIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoMyIsCiAgICAgICAgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgaWQ6CiAgICAgICAgICAgICAgImZpbmFsLW5vdGUtaW50ZWdyYXRpbmctZGVzaWduLWludG8teW91ci1jb21wYW55LW9yLWNvbW11bml0eS1zLXByb2Nlc3MiCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgIiNmaW5hbC1ub3RlLWludGVncmF0aW5nLWRlc2lnbi1pbnRvLXlvdXItY29tcGFueS1vci1jb21tdW5pdHktcy1wcm9jZXNzIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBGaW5hbCBub3RlOiBpbnRlZ3JhdGluZyBkZXNpZ24gaW50byB5b3VyIGNvbXBhbnkgb3IgY29tbXVuaXR5J3MgcHJvY2VzcyIKICAgICAgICAgICkKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSW4gbWFueSBsZWdhY3kgb3JnYW5pemF0aW9ucywgZXZlbiB0aG9zZSB0aGF0IGVtYnJhY2UgbW9kZXJuIGRldmVsb3BtZW50IG1ldGhvZG9sb2dpZXMsIGRlc2lnbiAod2hldGhlciBzdHJhdGVneSBvciBleGVjdXRpb24pIGxpdmVzIGluIGEgc2VwYXJhdGUgc2lsbyBmcm9tIHRoZSBjb3JlIGRldiBjb21tdW5pdHkuIFRoaXMgdG9vbGJveCBhc3N1bWVzIHRoYXQgdGhpcyBzb3J0IG9mIGlzb2xhdGlvbiBub3Qgb25seSBpcyB1bm5lY2Vzc2FyeSwgaXQncyBhbHNvIGFydGlmaWNpYWwg4oCUIGFmdGVyIGFsbCwgY3JlYXRpbmcgYSBuZXcgc29ydCBvZiBtYWNoaW5lIG9yIHNlcnZpY2UgaW52b2x2ZXMgZGVmaW5pbmcgaG93IGl0IGNvbW11bmljYXRlcyB3aXRoIGFsbCBpdHMgY291bnRlcnBhcnRzLCB3aGV0aGVyIHNpbGljb24tIG9yIGNhcmJvbi1iYXNlZC4gSW4gdGhhdCBzZW5zZSwgYSB1c2VyIGludGVyZmFjZSDigJQgb3IgdXNlciBleHBlcmllbmNlIGluIGdlbmVyYWwg4oCUIGlzIGp1c3QgYW5vdGhlciBraW5kIG9mIEFQSSwganVzdCBtb3JlIGh1bWFuLWNvbnN1bWFibGUuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiV2hpbGUgaHVtYW4gYmFuZHdpZHRoIGNvbmNlcm5zIG1pZ2h0IG5vdCBhbHdheXMgbWVhbiB0aGF0IHlvdSBoYXZlIGEgcHJvZmVzc2lvbmFsIGRlc2lnbmVyLCBVWCBwcmFjdGl0aW9uZXIgb3IgdXNlciByZXNlYXJjaGVyIGF2YWlsYWJsZSBpbiB5b3VyIG9yZy9idXNpbmVzcyB0byBlbWJlZCBmdWxsLXRpbHQgaW50byBhIHBhcnRpY3VsYXIgcHJvamVjdCwgdGhlIGhvcGUgaXMgdGhhdCBieSBwcm92aWRpbmcgRElZIGd1aWRhbmNlIGFuZCBpbnB1dCBpbiB0aGlzIHRvb2xib3gsIGJ1aWxkZXJzIGFuZCBtYWtlcnMgb2YgYWxsIGtpbmRzIGNhbiBjb250aW51ZSB0byB3b3JrIHRvd2FyZCBhbiBpZGVhbCBvZiBpbnRlZ3JhdGluZyBkZXNpZ24gcHJhY3RpY2VzIGludG8gZXZlcnkgc3RlcCBvZiB0aGUgY3JlYXRpb24gcHJvY2Vzcy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJodW5ncnktZm9yLW1vcmUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2h1bmdyeS1mb3ItbW9yZSIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgSHVuZ3J5IGZvciBtb3JlPyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkhvcGVkIHNvLiDwn5iKIERpdmUgZGVlcCBpbnRvIGFsbCBzb3J0cyBvZiB0YXN0eSBkZXNpZ24teSBnb29kbmVzcyBvdmVyIGluIHRoZSAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoIlJvdXRlckxpbmsiLCB7IGF0dHJzOiB7IHRvOiAiL2Z1cnRoZXItcmVhZGluZy5odG1sIiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJEZXNpZ24gVG9vbGJveCBGdXJ0aGVyIFJlYWRpbmciKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiBsaXN0IC4uLiBhbmQgcGxlYXNlIGZlZWwgZnJlZSB0byAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vZ2l0aHViLmNvbS9qZXNzaWNhc2NoaWxsaW5nL2Rlc2lnbi1tZXRob2RzLXRvb2xib3giLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJhZGQgeW91ciBvd24gcmVzb3VyY2VzIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBieSBtYWtpbmcgYSBwdWxsIHJlcXVlc3QgaW4gdGhpcyB0b29sYm94J3MgcmVwbyEiKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}